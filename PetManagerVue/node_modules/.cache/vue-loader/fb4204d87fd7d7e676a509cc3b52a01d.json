{"remainingRequest":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\src\\components\\front\\ArticleKp.vue?vue&type=template&id=71139415&","dependencies":[{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\src\\components\\front\\ArticleKp.vue","mtime":1720269240794},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713715556975},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1713715567757},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713715556975},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\PetManager\\src\\PetManagerVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1713715567752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}